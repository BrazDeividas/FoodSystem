@page "/ingredients"
@using FoodSystemClient.Components.Components
@using FoodSystemClient.Wrappers
@using FoodSystemClient.Models
@using FoodSystemClient.Services
@using FoodSystemClient.Authentication
@using System.Diagnostics.CodeAnalysis
@inject IHttpClientFactory ClientFactory
@inject IIngredientService ingredientService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Ingredients</PageTitle>

<h2>Ingredients</h2>

@if (Items == null)
{
    <p>Loading...</p>
}
else
{
    <input type="text" id="searchInput" placeholder="Search..." @bind="Search" class="form-control mb-3" @onkeyup="OnEnterPress"/>
    <Button IsAsync="true" OnClick="@AddToMyIngredientsAsync" ButtonStyle= "ButtonStyle.Round" LoadingIcon = "fa-solid fa-spin" > Add to My Ingredients </Button>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>
                    <input type="checkbox" @bind="IsAllChecked" @onclick="SelectAll"/>
                </th> <!-- Empty header for selection buttons -->
                <th>Owned</th>
                <th>Description</th>
                <th>Category</th>
                <th>Energy (kcal)</th>
                <th>Fat (g)</th>
                <th>Of which Saturates (g)</th>
                <th>Carbohydrate (g)</th>
                <th>Of which Sugars (g)</th>
                <th>Protein (g)</th>
                <th>Salt (g)</th>
                <th>Vitamin C (mg)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ingredient in Items)
            {
                <tr>
                    <td>
                        <input type="checkbox" @bind="ingredient.Selected"/>
                    </td>
                    <td style="text-align: center; vertical-align: center;">
                        @if(ingredient.Owned)
                        {
                            <i class="fas fa-check"></i>
                        }
                    </td>
                    <td>@ingredient.Description</td>
                    <td>@ingredient.Category</td>
                    <td style="text-align: center; vertical-align: center;">@ingredient.EnergyKcal</td>
                    <td style="text-align: center; vertical-align: center;">@Math.Round(ingredient.FatG, 2)</td>
                    <td style="text-align: center; vertical-align: center;">@Math.Round(ingredient.SaturatedFatsG, 2)</td>
                    <td style="text-align: center; vertical-align: center;">@Math.Round(ingredient.CarbG, 2)</td>
                    <td style="text-align: center; vertical-align: center;">@Math.Round(ingredient.SugarG, 2)</td>
                    <td style="text-align: center; vertical-align: center;">@Math.Round(ingredient.ProteinG, 2)</td>
                    <td style="text-align: center; vertical-align: center;">@Math.Round(ingredient.SodiumMg / 1000, 2)</td>
                    <td style="text-align: center; vertical-align: center;">@Math.Round(ingredient.VitcMg, 2)</td>
                </tr>
            }
        </tbody>
    </table>
    <CustomPagination TotalPages="TotalPages" CurrentPage="CurrentPage" OnPageSelected="@LoadIngredientsAsync"></CustomPagination>
}

@code {
    [NotNull]
    private List<Ingredient>? Items { get; set; } = new List<Ingredient>();
    private List<Ingredient>? OwnedItems { get; set; } = new List<Ingredient>();
    private PagedResponse<IEnumerable<Ingredient>> ResponseIngredients { get; set; }
    private int TotalPages;
    private int PageSize;
    private int CurrentPage;
    private string Search { get; set; } = null!;
    private string PreviousSearch { get; set; } = null!;
    private bool IsAllChecked { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ResponseIngredients = await ingredientService.GetIngredientsByPage(1, 10, Search);
        await LoadOwnedIngredientsAsync();
        LoadDataFromResponse();
    }

    private async Task LoadIngredientsAsync(int page)
    {
        CurrentPage = page;
        ResponseIngredients = await ingredientService.GetIngredientsByPage(CurrentPage, PageSize, Search);
        LoadDataFromResponse();
    }

    private async Task LoadOwnedIngredientsAsync()
    {
        var response = await ingredientService.GetOwnedIngredients();
        OwnedItems = response.Data.ToList();
    }

    private async Task AddToMyIngredientsAsync()
    {
        var ingredientIds = Items.Where(x => x.Selected).Select(x => x.IngredientId).ToList();
        await ingredientService.AddIngredientsToUser(ingredientIds);
        await LoadOwnedIngredientsAsync();  
        StateHasChanged();
    }

    private async void LoadDataFromResponse()
    {
        if (ResponseIngredients != null && ResponseIngredients.Data != null)
        {
            TotalPages = ResponseIngredients.TotalPages;
            PageSize = ResponseIngredients.PageSize;
            CurrentPage = ResponseIngredients.PageNumber;
            Items = ResponseIngredients.Data.ToList();
            Items.ForEach(x => x.Owned = (
                OwnedItems!.Any(owned => owned.IngredientId == x.IngredientId)
                ? true
                : false
            ));
            IsAllChecked = false;
        }
    }

    private void SelectAll()
    {
        IsAllChecked = !IsAllChecked;
        var selectAll = Items.All(x => x.Selected);
        foreach (var ingredient in Items)
        {
            ingredient.Selected = IsAllChecked;
        }
    }

    private async Task OnEnterPress(KeyboardEventArgs e)
    {
        if(e.Key == "Enter")
            if(!string.Equals(Search, PreviousSearch)) 
            {
                ResponseIngredients = await ingredientService.GetIngredientsByPage(1, 10, Search);
                LoadDataFromResponse();
                PreviousSearch = Search;
            }
    }
}