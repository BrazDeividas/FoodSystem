@page "/login"
@inject IUserService userService
@inject AuthenticationService authenticationService
@inject TokenProvider tokenProvider
@inject ISessionStorageService SessionStorage
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Login</PageTitle>

@* <div>
    <form @onsubmit="LoginAsync">
        <div class ="form-group row" >
            <label for="username" class="col-sm-2 col-form-label">Username</label>
            <div class="col-sm-10">
                    <BootstrapInput @bind-Value="@username" Placeholder="Username" />
            </div>
        </div>
        <div class="form-group row">
            <div class="col-sm-10">

            </div>
        </div>
    </form>
</div> *@


<div class="login-item login-item-floating">
    <div class="text-center">
        <h4 class="text-dark">Login</h4>
    </div>
    <ValidateForm Model="@Model" OnValidSubmit="@LoginAsync">
        <FloatingLabel DisplayText="username" TValue="string" IsGroupBox="true" PlaceHolder="username" @bind-Value="@Model.Username" />
        <hr />
        <Button Text="Login" Color="Color.Primary" IsAsync="true"></Button>
    </ValidateForm>
</div>


@code {
    [NotNull]
    private LoginModel? Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task LoginAsync(EditContext context)
    {
        if (!context.Validate()) return;

        if(string.IsNullOrEmpty(Model.Username))
        {
            return;
        }

        var userPrincipal = await userService.LoginAsync(Model.Username);
        if(userPrincipal != null)
        {
            authenticationService.CurrentUser = userPrincipal;
            await SessionStorage.SetItemAsync<string>("access_token", tokenProvider.AccessToken);
            navigationManager.NavigateTo("/");
        }
    }
}