@page "/meal-plans"
@inject IMealPlanService MealPlanService
@inject MessageService messageService
@inject NavigationManager navigationManager

<PageTitle>Meal Plans</PageTitle>

@if(Loading)
{
    <SkeletonParagraph />
}
else if(CurrentMealPlan == null)
{
    <h3>Generate Your Meal Plan</h3>

    <ValidateForm Model="@MealPlanForm" OnValidSubmit="@GenerateAsync"> 
        <div class="row">
            <div class="col-md-6">
                <label>Number of Meals</label>
                <BootstrapInputNumber @bind-Value="MealPlanForm.NumberOfMeals" Min="1" Max="6" ShowLabel="false"></BootstrapInputNumber>
            </div>
            <div class="col-md-6">
                <label>Plan Duration</label>
                <DateTimeRange @bind-Value="MealPlanForm.DateRangeValue" MinValue="DateTime.Today" ShowSidebar="true" ViewMode="DatePickerViewMode.Date" IsEditable="true" ShowLabel="false" DateFormat="yyyy/MM/dd" />
            </div>
        </div>
        <Button ButtonType="ButtonType.Submit" Color="Color.Primary" Icon="fa-solid fa-paper-plane" Text="Generate" IsAsync="true" />
    </ValidateForm>
}
else
{
    <div class="row">
        <div class="col-10">
            <h3>Your Meal Plan For Today</h3>
        </div>
        <div class="col-2">
            <h5>
                <small class="text-muted">@DateTime.Now.ToShortDateString()</small>
                <small class="text-muted">Total Calories: </small><small>@CurrentMealPlan.MealPlanItems.Sum(x => x.Recipe.Calories)</small>
            </h5>
        </div>
    </div>
    @foreach (var item in CurrentMealPlan.MealPlanItems)
    {
        <div class="container">
            <div class="card">
                <div class="row no-gutters">
                    <div class="col-md-4">
                        <img src="@item.Recipe.ImageUrl" class="card-img-top rounded recipe-image" alt="@item.Recipe.Title" />
                    </div>
                    <div class="col-md-8">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-10">
                                    <h5 class="card-title">@item.Recipe.Title</h5>
                                </div>
                                <div class="col-2">
                                        <small>Calories: <b>@item.Recipe.Calories</b></small>
                                        <br>
                                        <small>Servings: @item.Recipe.Servings</small>
                                </div>
                            </div>
                            <hr />
                            <p class="card-text">@item.Recipe.Instructions</p>
                            <ul class="list-group">
                                <li class="list-group-item active"><b>Ingredients</b></li>
                                @foreach (var ingredient in item.Recipe.Ingredients)
                                {
                                    <li class="list-group-item">@ingredient</li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}



@code {
    private MealPlanFormModel MealPlanForm { get; set; } = new MealPlanFormModel();
    private MealPlan CurrentMealPlan { get; set; }
    private Response<MealPlan> ResponseMealPlan { get; set;}
    private bool Loading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        ResponseMealPlan = await MealPlanService.GetCurrentMealPlanAsync();
        if(ResponseMealPlan.Succeeded && ResponseMealPlan.Data != null)
        {
            CurrentMealPlan = ResponseMealPlan.Data;
        }

        await base.OnInitializedAsync();
        Loading = false;
    }

    private async Task GenerateAsync(EditContext context)
    {
        if (!context.Validate()) return;

        //validate date range

        if(MealPlanForm.DateRangeValue.Start > MealPlanForm.DateRangeValue.End)
        {
            await messageService.Show(new MessageOption()
            {
                Content = "Start date must be before end date",
                Icon = "fa-solid fa-exclamation-circle",
                Color = Color.Danger
            });
            return;
        }

        ResponseMealPlan = await MealPlanService.GenerateMealPlanAsync(MealPlanForm.NumberOfMeals, MealPlanForm.DateRangeValue.Start, MealPlanForm.DateRangeValue.End);
        if (ResponseMealPlan.Succeeded && ResponseMealPlan.Data != null)
        {
            await messageService.Show(new MessageOption()
            {
                Content = "Meal Plan generated successfully!",
                Icon = "fa-solid fa-check-circle",
                Color = Color.Success
            });
            CurrentMealPlan = ResponseMealPlan.Data;
        }
        navigationManager.Refresh(false);
    }

    private class MealPlanFormModel
    {
        [Required]
        [Range(1, 6, ErrorMessage = "Number of meals must be between 1 and 6")]
        public int NumberOfMeals { get; set; }

        [Required]
        public DateTimeRangeValue DateRangeValue { get; set; } = new DateTimeRangeValue();
    }
}