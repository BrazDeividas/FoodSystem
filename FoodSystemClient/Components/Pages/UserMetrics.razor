@page "/user-metrics"
@using FoodSystemClient.Services
@using FoodSystemClient.DTOs
@using System.Text.Json
@inject IUserService userService
@inject IJSRuntime jsRuntime
@rendermode InteractiveServer

<PageTitle>Adding User Metrics</PageTitle>

<ValidateForm Model="@Model" OnValidSubmit="@AddUserMetricsAsync">
    <EditorForm TModel="Models.UserMetrics">
        <Buttons>
            <Button ButtonType="ButtonType.Submit" Icon="fa-solid fa-paper-plane" Text="Send" IsAsync="true" />
        </Buttons>
    </EditorForm>
</ValidateForm>

@code {
    [SupplyParameterFromForm]
    private Models.UserMetrics? Model { get; set;}
    
    private List<string> SexValues = ["Male", "Female"];

    private string? _ModelClone;

    private string? UserId { get; set; }

    private bool isValid { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Model ??= new();
        UserId = "";
        if (Model != null)
        {
            _ModelClone = JsonSerializer.Serialize(Model);
        }
    }

    private async Task AddUserMetricsAsync(EditContext context)
    {
        isValid = context.Validate();

        if (!isValid)
        {
            return;
        }

        int responseCode = await userService.PostUserMetrics(Model!, int.Parse(UserId));
        if (responseCode == 200)
        {
            await jsRuntime.InvokeVoidAsync("alert", "User Metrics Added Successfully");
            Reset();
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("alert", "Server Error: User Metrics Not Added");
        }
    }

    private void Reset()
    {
        Model = JsonSerializer.Deserialize<Models.UserMetrics>(_ModelClone!);
    }

}
