@page "/user-metrics"
@using FoodSystemClient.Services
@using FoodSystemClient.DTOs
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Authorization
@inject IUserService userService
@inject IJSRuntime jsRuntime
@inject MessageService messageService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>User Metrics</PageTitle>

<h2>My User Metrics</h2>

<ValidateForm Model="@Model" OnValidSubmit="@AddUserMetricsAsync">
    <EditorForm TModel="Models.UserMetrics">
        <Buttons>
            @if(metricsExist)
            {
                <Button ButtonType="ButtonType.Submit" Icon="fa-solid fa-save" Text="Update" IsAsync="true" />
            }
            else
            {
                <Button ButtonType="ButtonType.Submit" Icon="fa-solid fa-paper-plane" Text="Send" IsAsync="true" />
            }
        </Buttons>
    </EditorForm>
</ValidateForm>

@code {
    [SupplyParameterFromForm]
    private Models.UserMetrics? Model { get; set;}

    private List<string> SexValues = ["Male", "Female"];

    private string? _ModelClone;

    private string? UserId { get; set; }

    private bool isValid { get; set; } = true;

    private bool metricsExist { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Model = await userService.GetUserMetrics();

        if(Model != null)
        {
            metricsExist = true;
        }

        Model ??= new();

        if (Model != null)
        {
            _ModelClone = JsonSerializer.Serialize(Model);
        }
    }

    private async Task AddUserMetricsAsync(EditContext context)
    {
        if (!context.Validate()) return;

        bool success = await userService.PostUserMetrics(Model!);
        if(success)
        {
            await ShowAlertAsync();
            await Task.Delay(500);
            navigationManager.NavigateTo("/");
        }
    }

    private void Reset()
    {
        Model = JsonSerializer.Deserialize<Models.UserMetrics>(_ModelClone!);
    }

    private async Task ShowAlertAsync()
    {
        await messageService.Show(new MessageOption()
        {
            Content = "User metrics successfully updated!",
            Icon = "fa-solid fa-check-circle",
            Color = Color.Success
        });
    }

}
